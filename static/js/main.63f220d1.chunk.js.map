{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Quote","id","dangerouslySetInnerHTML","__html","this","props","text","author","Component","Buttons","onClick","getQuote","href","concat","plainText","target","rel","App","state","url","Math","random","fetch","then","response","json","data","_this","setState","content","title","document","getElementById","innerText","catch","error","console","log","App_Header","App_Quote","App_Buttons","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAaMA,SAAS,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,qCAKAE,mLAEF,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKG,GAAG,OAAOC,wBAAyB,CAAEC,OAAQC,KAAKC,MAAMC,QAC7DV,EAAAC,EAAAC,cAAA,OAAKG,GAAG,UAAUG,KAAKC,MAAME,gBALjBC,aAWdC,EAAU,SAACJ,GACf,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,UAAQG,GAAG,YAAYS,QAASL,EAAMM,UAAtC,QACAf,EAAAC,EAAAC,cAAA,KAAGG,GAAG,cAAcW,KAAI,yCAAAC,OAA2CR,EAAMS,WAAjDD,OAA6DR,EAAME,QAAUQ,OAAO,SAASC,IAAI,uBAAzH,WAiDSC,6MA3CbC,MAAQ,CACNZ,KAAM,GACNC,OAAQ,GACRO,UAAW,MAGbH,SAAW,WACT,IAAMQ,EAAG,mGAAAN,OAAsGO,KAAKC,UAEpHC,MAAMH,GACLI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJC,EAAKC,SAAS,CACZtB,KAAMoB,EAAK,GAAGG,QACdtB,OAAQ,MAAQmB,EAAK,GAAGI,UAG3BP,KAAK,WACJI,EAAKC,SAAS,CACZd,UAAWiB,SAASC,eAAe,QAAQC,cAG9CC,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,0FAI5B/B,KAAKO,4CAIL,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKG,GAAG,eACRL,EAAAC,EAAAC,cAAA,OAAKG,GAAG,aACNL,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,CAAOjC,KAAMF,KAAKc,MAAMZ,KAAMC,OAAQH,KAAKc,MAAMX,SACjDX,EAAAC,EAAAC,cAAC0C,EAAD,CAAS7B,SAAUP,KAAKO,SAAUG,UAAWV,KAAKc,MAAMJ,UAAWP,OAAQH,KAAKc,MAAMX,kBArC9EC,aC7BEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASjB,SAASC,eAAe,SD2H3C,kBAAmBiB,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.63f220d1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n/*\n\"https://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1&callback=\";\n\nresponse:\n  text: [0].content\n  author: [0].title\n\n`https://twitter.com/intent/tweet?text=${encdeURIComponent(textToTweet)}`\n*/\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <h1>Random Quote Machine</h1>\n    </div>\n  )\n}\n\nclass Quote extends Component {\n  render() {\n    return (\n      <div className=\"quote-container\">\n        <div id=\"text\" dangerouslySetInnerHTML={{ __html: this.props.text }}></div>\n        <div id=\"author\">{this.props.author}</div>\n      </div>\n    )\n  }\n}\n\nconst Buttons = (props) => {\n  return (\n    <div className=\"buttons-container\">\n      <button id=\"new-quote\" onClick={props.getQuote}>Next</button>\n      <a id=\"tweet-quote\" href={`https://twitter.com/intent/tweet?text=${props.plainText}${props.author}`} target=\"_blank\" rel=\"noopener noreferrer\">Tweet</a>\n    </div>\n  )\n}\n\nclass App extends Component {\n  state = {\n    text: \"\",\n    author: \"\",\n    plainText: \"\"\n  }\n\n  getQuote = () => {\n    const url = `https://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1&callback&${Math.random()}`\n\n    fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        text: data[0].content,\n        author: \" - \" + data[0].title\n      })\n    })\n    .then(() => {\n      this.setState({\n        plainText: document.getElementById(\"text\").innerText\n      })\n    })\n    .catch(error => console.log(error))\n  }\n\n  componentWillMount() {\n    this.getQuote();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"background\" />\n        <div id=\"quote-box\">\n          <Header />\n          <Quote text={this.state.text} author={this.state.author} />\n          <Buttons getQuote={this.getQuote} plainText={this.state.plainText} author={this.state.author} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}